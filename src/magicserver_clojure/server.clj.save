;; Magic Server in Clojure


(ns magicserver-clojure.server)
(use '[clojure.string])
(use '[clojure.data.json :as json])
(require '[clojure.java.io :as io])
(import '[java.net ServerSocket])


(def CONTENT-TYPE {"html" "text/html", "css" "text/css", "js" "application/javascript",
                  "jpeg" "image/jpeg", "jpg" "image/jpg", "png" "image/png", "gif" "image/gif",
                   "ico" "image/x-icon", "text" "text/plain", "json" "application/json"})


(def SESSIONS {})


(def test-get-str "GET / HTTP/1.1\r\nHost: localhost:8888\r\nConnection: keep-alive\r\nCache-Control: max-age=0\r\nUpgrade-Insecure-Requests: 1\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/56.0.2924.76 Chrome/56.0.2924.76 Safari/537.36\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\nDNT: 1\r\nAccept-Encoding: gzip, deflate, sdch, br\r\nAccept-Language: en-GB,en-US;q=0.8,en;q=0.6\r\n\r\n")
(def test-post-str "POST /submit HTTP/1.1\r\nHost: localhost:8888\r\nConnection: keep-alive\r\nContent-Length: 31\r\nCache-Control: max-age=0\r\nOrigin: http://localhost:8888\r\nUpgrade-Insecure-Requests: 1\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/56.0.2924.76 Chrome/56.0.2924.76 Safari/537.36\r\nContent-Type: application/x-www-form-urlencoded\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\nDNT: 1\r\nReferer: http://localhost:8888/\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: en-GB,en-US;q=0.8,en;q=0.6\r\n\r\n")
(def test-post-str2 "POST /submit HTTP/1.1\r\nHost: localhost:8888\r\nConnection: keep-alive\r\nContent-Length: 31\r\nCache-Control: max-age=0\r\nOrigin: http://localhost:8888\r\nUpgrade-Insecure-Requests: 1\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/57.0.2987.98 Chrome/57.0.2987.98 Safari/537.36\r\nContent-Type: application/x-www-form-urlencoded\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\nDNT: 1\r\nReferer: http://localhost:8888/\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: en-GB,en-US;q=0.8,en;q=0.6\r\n\r\nfirstname=Pavan&lastname=Mantha\r\n\r\n")


;;Parsers

(defn get-http-header [data]
	(if (re-find #"\r\n\r\n" data)
		(split data #"\r\n\r\n" 2)))


(defn process-request-first-line
	[input]
	(zipmap ["method" "path" "protocol"] (split input #"\s")))


(defn header-parser [input]
	(let [header-list (split input #"\r\n")]
		(loop 
			[header-map (process-request-first-line (first header-list))
			re (rest header-list)]
			(if (empty? re)
				 header-map
				(recur
					(assoc 
						header-map
						(first (split (first re) #":\s+")						(second (split (first re) #":\s+")))
					(rest re))))))


(def date (.toString (java.util.Date.)))


(defn response-stringify [response]
	(let [keys-needed (filter #(and (not= % "status") (not= % "Content")) (keys response))
	      response-string (str (response "status") "\r\n")]
	      (loop [re response-string
	      	     h-keys keys-needed]
	      	     (if (empty? h-keys)
                     (str re "\r\n" (response "Content") "\r\n\r\n")
	      	         (recur (str re (first h-keys) ": " (response (first h-keys)) "\r\n") (rest h-keys))))))

;;Handlers

(defn response-handler [request response]
	(response-stringify (assoc response "Date" date "Connection" "close" "Server" "magic-server-clojure")))


(defn ok-200-handler [request response]
	(if (and (response "Content") (response "Content-type"))
		(response-handler request (assoc response "status" "HTTP/1.1 200 OK" "Content-Length" (str (count (response "Content")))))
		(response-handler request (assoc response "status" "HTTP/1.1 200 OK"))))


(defn err-404-handler [request response]
	(response-handler request (assoc response "status" "HTTP/1.1 404 Not Found" "content" "Content Not Found" "Content-type" "text/html")))


(defn send-html-handler [request response content]
	(if (not (empty? content))
		(ok-200-handler request (assoc ;; Magic Server in Clojure


(ns magicserver-clojure.server)
(use '[clojure.string])
(use '[clojure.data.json :as json])
(require '[clojure.java.io :as io])
(import '[java.net ServerSocket])


(def CONTENT-TYPE {"html" "text/html", "css" "text/css", "js" "application/javascript",
                  "jpeg" "image/jpeg", "jpg" "image/jpg", "png" "image/png", "gif" "image/gif",
                   "ico" "image/x-icon", "text" "text/plain", "json" "application/json"})


(def SESSIONS {})


(def test-get-str "GET / HTTP/1.1\r\nHost: localhost:8888\r\nConnection: keep-alive\r\nCache-Control: max-age=0\r\nUpgrade-Insecure-Requests: 1\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/56.0.2924.76 Chrome/56.0.2924.76 Safari/537.36\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\nDNT: 1\r\nAccept-Encoding: gzip, deflate, sdch, br\r\nAccept-Language: en-GB,en-US;q=0.8,en;q=0.6\r\n\r\n")
(def test-post-str "POST /submit HTTP/1.1\r\nHost: localhost:8888\r\nConnection: keep-alive\r\nContent-Length: 31\r\nCache-Control: max-age=0\r\nOrigin: http://localhost:8888\r\nUpgrade-Insecure-Requests: 1\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/56.0.2924.76 Chrome/56.0.2924.76 Safari/537.36\r\nContent-Type: application/x-www-form-urlencoded\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\nDNT: 1\r\nReferer: http://localhost:8888/\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: en-GB,en-US;q=0.8,en;q=0.6\r\n\r\n")
(def test-post-str2 "POST /submit HTTP/1.1\r\nHost: localhost:8888\r\nConnection: keep-alive\r\nContent-Length: 31\r\nCache-Control: max-age=0\r\nOrigin: http://localhost:8888\r\nUpgrade-Insecure-Requests: 1\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/57.0.2987.98 Chrome/57.0.2987.98 Safari/537.36\r\nContent-Type: application/x-www-form-urlencoded\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\nDNT: 1\r\nReferer: http://localhost:8888/\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: en-GB,en-US;q=0.8,en;q=0.6\r\n\r\nfirstname=Pavan&lastname=Mantha\r\n\r\n")


;;Parsers

(defn get-http-header [data]
	(if (re-find #"\r\n\r\n" data)
		(split data #"\r\n\r\n" 2)))


(defn process-request-first-line
	[input]
	(zipmap ["method" "path" "protocol"] (split input #"\s")))


(defn header-parser [input]
	(let [header-list (split input #"\r\n")]
		(loop 
			[header-map (process-request-first-line (first header-list))
			re (rest header-list)]
			(if (empty? re)
				 header-map
				(recur
					(assoc 
						header-map
						(first (split (first re) #":\s+")						(second (split (first re) #":\s+")))
					(rest re))))))


(def date (.toString (java.util.Date.)))


(defn response-stringify [response]
	(let [keys-needed (filter #(and (not= % "status") (not= % "Content")) (keys response))
	      response-string (str (response "status") "\r\n")]
	      (loop [re response-string
	      	     h-keys keys-needed]
	      	     (if (empty? h-keys)
                     (str re "\r\n" (response "Content") "\r\n\r\n")
	      	         (recur (str re (first h-keys) ": " (response (first h-keys)) "\r\n") (rest h-keys))))))

;;Handlers

(defn response-handler [request response]
	(response-stringify (assoc response "Date" date "Connection" "close" "Server" "magic-server-clojure")))


(defn ok-200-handler [request response]
	(if (and (response "Content") (response "Content-type"))
		(response-handler request (assoc response "status" "HTTP/1.1 200 OK" "Content-Length" (str (count (response "Content")))))
		(response-handler request (assoc response "status" "HTTP/1.1 200 OK"))))


(defn err-404-handler [request response]
	(response-handler request (assoc response "status" "HTTP/1.1 404 Not Found" "content" "Content Not Found" "Content-type" "text/html")))


(defn send-html-handler [request response content]
	(if (not (empty? content))
		(ok-200-handler request (assoc 